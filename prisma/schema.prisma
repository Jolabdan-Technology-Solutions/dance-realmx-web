generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Tenant {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  username            String               @unique
  password            String
  first_name          String?
  last_name           String?
  role                UserRole[]           @default([GUEST_USER])
  profile_image_url   String?
  auth_provider       String?
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  subscription_tier   SubscriptionTier?
  tenant_id           Int?
  accountType         AccountType?
  stripeAccountId     String?              @unique
  stripeAccountStatus StripeAccountStatus? @default(PENDING)
  frequency           String?
  is_active           Boolean?
  email_verified      Boolean              @default(false)
  instructor_bookings Booking[]            @relation("InstructorBookings")
  bookings            Booking[]
  courses             Course[]             @relation("InstructorCourses")
  enrollments         Enrollment[]
  receivedMessages    Message[]            @relation("ReceivedMessages")
  sentMessages        Message[]            @relation("SentMessages")
  notifications       Notification[]
  payments            Payment[]
  profile             Profile?
  resources           Resource[]           @relation("SellerResources")
  resource_purchases  ResourcePurchase[]
  reviews             Review[]
  stripe_customer     StripeCustomer?
  subscriptions       Subscription[]
  testimonials        Testimonial[]
  certifications      UserCertification[]
  features            UserFeature[]        @relation("UserFeatures")
  role_mappings       UserRoleMapping[]
  tenant              Tenant?              @relation(fields: [tenant_id], references: [id])
  CartItem            CartItem[]
  passwordResets      PasswordReset[]
  emailVerifications  EmailVerification[]
  quizAttempts        QuizAttempt[]
  orders              Order[]
}

model PasswordReset {
  id         Int       @id @default(autoincrement())
  email      String
  token      String
  expires_at DateTime
  used_at    DateTime?
  user_id    Int
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id         Int       @id @default(autoincrement())
  email      String
  token      String
  expires_at DateTime
  used_at    DateTime?
  user_id    Int
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Profile {
  id               Int      @id @default(autoincrement())
  user_id          Int      @unique
  bio              String?
  phone_number     String?
  address          String?
  city             String?
  state            String?
  country          String?
  zip_code         String?
  is_professional  Boolean  @default(false)
  is_verified      Boolean  @default(false)
  availability     Json?
  dance_style      String[]
  location         String?
  portfolio        String?
  price_max        Int?
  price_min        Int?
  pricing          Int?
  service_category String[]
  services         String[]
  session_duration Int?
  travel_distance  Int?
  years_experience Int?
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Course {
  id                   Int                 @id @default(autoincrement())
  title                String
  description          String
  price                Float
  image_url            String?
  instructor_id        Int
  preview_video_url    String
  video_url            String
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  detailed_description String
  difficulty_level     String
  duration             String
  short_name           String?             @unique
  visible              Boolean
  average_rating       Float?
  is_published         Boolean             @default(false)
  instructor           User                @relation("InstructorCourses", fields: [instructor_id], references: [id], onDelete: Cascade)
  enrollments          Enrollment[]
  modules              Module[]
  reviews              Review[]
  certifications       UserCertification[]
  categories           Category[]          @relation("CourseCategories")
  tags                 Tag[]               @relation("CourseTags")
  CartItem             CartItem[]
  resources            Resource[]
  OrderItem            OrderItem[]
}

model Module {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  course_id   Int
  order       Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  lessons     Lesson[]
  course      Course     @relation(fields: [course_id], references: [id])
  resources   Resource[]
}

model Lesson {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  video_url  String?
  module_id  Int
  order      Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  module     Module     @relation(fields: [module_id], references: [id])
  quizzes    Quiz[]
  resources  Resource[]
}

model Enrollment {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  course_id             Int
  status                String    @default("ACTIVE")
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  completion_percentage Int       @default(0)
  progress              Int       @default(0)
  course                Course    @relation(fields: [course_id], references: [id])
  user                  User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payments              Payment[]

  @@unique([user_id, course_id])
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  content    String
  rating     Int
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id                 Int      @id @default(autoincrement())
  user_id            Int      @unique
  stripe_customer_id String   @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Subscription {
  id                     Int                   @id @default(autoincrement())
  user_id                Int
  plan_id                Int
  stripe_subscription_id String?               @unique
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean               @default(false)
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  frequency              SubscriptionFrequency
  stripe_session_id      String?
  status                 SubscriptionStatus    @default(ACTIVE)
  user                   User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan                   SubscriptionPlan      @relation(fields: [plan_id], references: [id])
}

model Booking {
  id            Int      @id @default(autoincrement())
  user_id       Int
  instructor_id Int
  session_start DateTime
  session_end   DateTime
  status        String   @default("PENDING")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  course_id     Int?
  instructor    User     @relation("InstructorBookings", fields: [instructor_id], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserCertification {
  id              Int      @id @default(autoincrement())
  user_id         Int
  course_id       Int
  issued_at       DateTime @default(now())
  certificate_url String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  course          Course   @relation(fields: [course_id], references: [id])
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ResourceCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  resources   Resource[]
}

model Resource {
  id              Int                @id @default(autoincrement())
  title           String
  description     String
  price           Float
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  ageRange        String?
  categoryId      Int?
  danceStyle      String?
  difficultyLevel String?
  sellerId        Int
  thumbnailUrl    String?
  type            String
  url             String
  course_id       Int?
  lesson_id       Int?
  module_id       Int?
  seller          User               @relation("SellerResources", fields: [sellerId], references: [id], onDelete: Cascade)
  purchases       ResourcePurchase[]
  category        ResourceCategory?  @relation(fields: [categoryId], references: [id])
  course          Course?            @relation(fields: [course_id], references: [id])
  module          Module?            @relation(fields: [module_id], references: [id])
  lesson          Lesson?            @relation(fields: [lesson_id], references: [id])
  CartItem        CartItem[]
  OrderItem       OrderItem[]
}

model ResourcePurchase {
  id                       Int       @id @default(autoincrement())
  user_id                  Int
  resource_id              Int
  stripe_payment_intent_id String?
  status                   String    @default("PENDING")
  amount                   Float
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  completed_at             DateTime?
  purchased_at             DateTime?
  resource                 Resource  @relation(fields: [resource_id], references: [id])
  user                     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, resource_id])
}

model Payment {
  id                       Int           @id @default(autoincrement())
  user_id                  Int
  stripe_payment_intent_id String?       @unique
  amount                   Float
  reference_id             Int?
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  currency                 String        @default("usd")
  metadata                 Json?
  status                   PaymentStatus @default(PENDING)
  reference_type           PaymentType
  stripe_session_id        String?
  completed_at             DateTime?
  stripe_customer_id       String?
  user                     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  enrollment               Enrollment?   @relation(fields: [reference_id], references: [id])
}

model UserRoleMapping {
  id        Int      @id @default(autoincrement())
  user_id   Int
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role])
  @@map("user_role_mappings")
}

model UserFeature {
  id          Int      @id @default(autoincrement())
  user_id     Int
  feature_key String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserFeatures", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, feature_key])
  @@map("user_features")
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  message    String
  type       String
  read       Boolean  @default(false)
  data       Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Message {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  receiver    User     @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender      User     @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([sender_id])
  @@index([receiver_id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  parent_id   Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  image_url   String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children    Category[] @relation("CategoryHierarchy")
  courses     Course[]   @relation("CourseCategories")
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  courses     Course[] @relation("CourseTags")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
}

model SubscriptionPlan {
  id                   Int              @id @default(autoincrement())
  name                 String           @unique
  slug                 String           @unique
  description          String?
  features             String[]
  priceMonthly         Decimal          @db.Decimal(10, 2)
  priceYearly          Decimal          @db.Decimal(10, 2)
  stripePriceIdMonthly String?
  stripePriceIdYearly  String?
  isPopular            Boolean          @default(false)
  isActive             Boolean          @default(true)
  isStandalone         Boolean          @default(false)
  planType             String           @default("main")
  featureDetails       Json?
  unlockedRoles        UserRole[]
  tier                 SubscriptionTier
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  subscriptions        Subscription[]

  @@map("subscription_plans")
}

model CourseCategories {
  A Int
  B Int

  @@id([A, B], map: "_CourseCategories_AB_pkey")
  @@index([B], map: "_CourseCategories_B_index")
  @@map("_CourseCategories")
}

model CourseTags {
  A Int
  B Int

  @@id([A, B], map: "_CourseTags_AB_pkey")
  @@index([B], map: "_CourseTags_B_index")
  @@map("_CourseTags")
}

model CartItem {
  id          Int       @id @default(autoincrement())
  user_id     Int
  course_id   Int?
  resource_id Int?
  quantity    Int       @default(1)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course      Course?   @relation(fields: [course_id], references: [id])
  resource    Resource? @relation(fields: [resource_id], references: [id])

  @@index([user_id])
  @@index([course_id])
  @@index([resource_id])
}

model Order {
  id                Int         @id @default(autoincrement())
  user_id           Int
  total             Float
  status            String      @default("PENDING")
  stripe_session_id String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  user              User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  order_id    Int
  course_id   Int?
  resource_id Int?
  quantity    Int       @default(1)
  order       Order     @relation(fields: [order_id], references: [id])
  course      Course?   @relation(fields: [course_id], references: [id])
  resource    Resource? @relation(fields: [resource_id], references: [id])
}

model Quiz {
  id         Int            @id @default(autoincrement())
  title      String
  lesson_id  Int
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  lesson     Lesson         @relation(fields: [lesson_id], references: [id])
  questions  QuizQuestion[]
  attempts   QuizAttempt[]
}

model QuizQuestion {
  id             Int                 @id @default(autoincrement())
  quiz_id        Int
  text           String
  answer         Int?
  order          Int?
  quiz           Quiz                @relation(fields: [quiz_id], references: [id])
  options        QuizOption[]
  attemptAnswers QuizAttemptAnswer[]
}

model QuizOption {
  id          Int          @id @default(autoincrement())
  question_id Int
  text        String
  is_correct  Boolean      @default(false)
  question    QuizQuestion @relation(fields: [question_id], references: [id])
}

model QuizAttempt {
  id         Int                 @id @default(autoincrement())
  user_id    Int
  quiz_id    Int
  score      Float
  correct    Int
  total      Int
  created_at DateTime            @default(now())
  user       User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz       Quiz                @relation(fields: [quiz_id], references: [id])
  answers    QuizAttemptAnswer[]
}

model QuizAttemptAnswer {
  id          Int          @id @default(autoincrement())
  attempt_id  Int
  question_id Int
  selected    Int
  is_correct  Boolean
  attempt     QuizAttempt  @relation(fields: [attempt_id], references: [id])
  question    QuizQuestion @relation(fields: [question_id], references: [id])
}

model comments {
  id         String   @id(map: "PK_8bf68bc960f2b69e818bdb90dcb") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
  postId     String?  @db.Uuid
  userId     String?  @db.Uuid
  guestName  String?
  guestEmail String?
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar
}

model newsletter_subscriptions {
  id           String   @id(map: "PK_cfca9a6e4f146a80a6cd2e76f1d") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String   @unique(map: "UQ_57fd53bd8b39fe19d2be8136f64") @db.VarChar
  isSubscribed Boolean  @default(true)
  subscribedAt DateTime @default(now()) @db.Timestamp(6)
}

model posts {
  id        String   @id(map: "PK_2829ac61eff60fcec60d7274b9e") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title     String   @db.VarChar
  content   String
  published Boolean  @default(false)
  tags      String?
  viewCount Int      @default(0)
  image     String?  @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  authorId  String?  @db.Uuid
}

model users {
  id           String   @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String   @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar
  password     String   @db.VarChar
  name         String   @db.VarChar
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  refreshToken String?  @db.VarChar
  avatar       String?  @db.VarChar
}

enum UserRole {
  GUEST_USER
  CURRICULUM_SELLER
  STUDENT
  ADMIN
  DIRECTORY_MEMBER
  CERTIFICATION_MANAGER
  INSTRUCTOR_ADMIN
  CURRICULUM_ADMIN
  COURSE_CREATOR_ADMIN
  BOOKING_PROFESSIONAL
  BOOKING_USER
  INSTRUCTOR
}

enum SubscriptionTier {
  FREE
  NOBILITY
  IMPERIAL
  ROYAL
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELED
  COMPLETED
}

enum PaymentType {
  COURSE
  RESOURCE
  SUBSCRIPTION
}

enum SubscriptionFrequency {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELED
  FAILED
  PENDING
  EXPIRED
  CANCELLED
}

enum AccountType {
  INSTRUCTOR
  SELLER
}

enum StripeAccountStatus {
  PENDING
  ACTIVE
  DEAUTHORIZED
}
