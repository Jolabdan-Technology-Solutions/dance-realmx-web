generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  users            User[]
  userRoleMappings UserRoleMapping[]
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  username            String              @unique
  password            String?
  first_name          String?
  last_name           String?
  role                UserRole            @default(GUEST_USER)
  profile_image_url   String?
  auth_provider       String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  subscription_tier   SubscriptionTier?
  instructor_bookings Booking[]           @relation("InstructorBookings")
  bookings            Booking[]
  courses             Course[]            @relation("InstructorCourses")
  enrollments         Enrollment[]
  receivedMessages    Message[]           @relation("ReceivedMessages")
  sentMessages        Message[]           @relation("SentMessages")
  notifications       Notification[]
  payments            Payment[]
  profile             Profile?
  resources           Resource[]          @relation("SellerResources")
  resource_purchases  ResourcePurchase[]
  reviews             Review[]
  stripe_customer     StripeCustomer?
  subscriptions       Subscription[]
  testimonials        Testimonial[]
  certifications      UserCertification[]
  selected_features   UserFeature[]
  user_roles          UserRoleMapping[]
  tenant_id           Int?
  tenant              Tenant?             @relation(fields: [tenant_id], references: [id])
}

model Profile {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  bio          String?
  phone_number String?
  address      String?
  city         String?
  state        String?
  country      String?
  zip_code     String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])
}

model Course {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String
  price             Float
  image_url         String?
  instructor_id     Int
  preview_video_url String
  video_url         String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  instructor        User                @relation("InstructorCourses", fields: [instructor_id], references: [id])
  enrollments       Enrollment[]
  modules           Module[]
  reviews           Review[]
  certifications    UserCertification[]
  categories        Category[]          @relation("CourseCategories")
  tags              Tag[]               @relation("CourseTags")
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  course_id   Int
  order       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [course_id], references: [id])
}

model Lesson {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  video_url  String?
  module_id  Int
  order      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  module     Module   @relation(fields: [module_id], references: [id])
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  status     String   @default("ACTIVE")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, course_id])
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  content    String
  rating     Int
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

model StripeCustomer {
  id                 Int      @id @default(autoincrement())
  user_id            Int      @unique
  stripe_customer_id String   @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id])
}

model Subscription {
  id                     Int              @id @default(autoincrement())
  user_id                Int
  stripe_subscription_id String           @unique
  tier                   SubscriptionTier
  status                 String
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean          @default(false)
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  user                   User             @relation(fields: [user_id], references: [id])
}

model Booking {
  id            Int      @id @default(autoincrement())
  user_id       Int
  instructor_id Int
  session_start DateTime
  session_end   DateTime
  status        String   @default("PENDING")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  instructor    User     @relation("InstructorBookings", fields: [instructor_id], references: [id])
  user          User     @relation(fields: [user_id], references: [id])
}

model UserCertification {
  id              Int      @id @default(autoincrement())
  user_id         Int
  course_id       Int
  issued_at       DateTime @default(now())
  certificate_url String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  course          Course   @relation(fields: [course_id], references: [id])
  user            User     @relation(fields: [user_id], references: [id])
}

model ResourceCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  resources   Resource[]
}

model Resource {
  id           Int                @id @default(autoincrement())
  title        String
  description  String
  price        Float
  seller_id    Int
  category_id  Int
  is_published Boolean            @default(false)
  file_url     String?
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  category     ResourceCategory   @relation(fields: [category_id], references: [id])
  seller       User               @relation("SellerResources", fields: [seller_id], references: [id])
  purchases    ResourcePurchase[]
}

model ResourcePurchase {
  id                       Int      @id @default(autoincrement())
  user_id                  Int
  resource_id              Int
  stripe_payment_intent_id String?
  status                   String   @default("PENDING")
  amount                   Float
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  resource                 Resource @relation(fields: [resource_id], references: [id])
  user                     User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, resource_id])
}

model Payment {
  id                       Int           @id @default(autoincrement())
  user_id                  Int
  stripe_payment_intent_id String        @unique
  amount                   Float
  reference_id             Int
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  currency                 String        @default("usd")
  metadata                 Json?
  stripe_customer_id       String?
  status                   PaymentStatus @default(PENDING)
  type                     PaymentType
  user                     User          @relation(fields: [user_id], references: [id])
}

model UserRoleMapping {
  id         Int      @id @default(autoincrement())
  user_id    Int
  tenant_id  Int
  role       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  tenant     Tenant   @relation(fields: [tenant_id], references: [id])

  @@unique([user_id, tenant_id])
}

model UserFeature {
  id          String   @id @default(cuid())
  user_id     Int
  feature_key String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, feature_key])
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  message    String
  type       String
  read       Boolean  @default(false)
  data       Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Message {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  receiver    User     @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  sender      User     @relation("SentMessages", fields: [sender_id], references: [id])

  @@index([sender_id])
  @@index([receiver_id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parent_id   Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  courses     Course[]   @relation("CourseCategories")
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  courses     Course[] @relation("CourseTags")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, course_id])
}

enum UserRole {
  CURRICULUM_SELLER
  CURRICULUM_ADMIN
  COURSE_CREATOR_ADMIN
  INSTRUCTOR_ADMIN
  BOOKING_PROFESSIONAL
  BOOKING_USER
  STUDENT
  GUEST_USER
  ADMIN
}

enum SubscriptionTier {
  BASIC_SELLER
  PREMIUM_SELLER
  BASIC_DIRECTORY
  PREMIUM_DIRECTORY
  TALENT_DIRECTORY
  ROYALTY_MEMBERSHIP
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELED
}

enum PaymentType {
  COURSE
  RESOURCE
  SUBSCRIPTION
}
