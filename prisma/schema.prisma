generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tenant {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  username            String              @unique
  password            String
  first_name          String?
  last_name           String?
  role                UserRole            @default(GUEST_USER)
  profile_image_url   String?
  auth_provider       String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  subscription_tier   SubscriptionTier?
  instructor_bookings Booking[]           @relation("InstructorBookings")
  bookings            Booking[]
  courses             Course[]            @relation("InstructorCourses")
  enrollments         Enrollment[]
  receivedMessages    Message[]           @relation("ReceivedMessages")
  sentMessages        Message[]           @relation("SentMessages")
  notifications       Notification[]
  payments            Payment[]
  profile             Profile?
  resources           Resource[]          @relation("SellerResources")
  resource_purchases  ResourcePurchase[]
  reviews             Review[]
  stripe_customer     StripeCustomer?
  subscriptions       Subscription[]
  testimonials        Testimonial[]
  certifications      UserCertification[]
  features            UserFeature[]       @relation("UserFeatures")
  role_mappings       UserRoleMapping[]
  tenant_id           Int?
  tenant              Tenant?             @relation(fields: [tenant_id], references: [id])
}

model Profile {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  bio          String?
  phone_number String?
  address      String?
  city         String?
  state        String?
  country      String?
  zip_code     String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])
}

model Course {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String
  price             Float
  image_url         String?
  instructor_id     Int
  preview_video_url String
  video_url         String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  instructor        User                @relation("InstructorCourses", fields: [instructor_id], references: [id])
  enrollments       Enrollment[]
  modules           Module[]
  reviews           Review[]
  certifications    UserCertification[]
  categories        Category[]          @relation("CourseCategories")
  tags              Tag[]               @relation("CourseTags")
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  course_id   Int
  order       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [course_id], references: [id])
}

model Lesson {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  video_url  String?
  module_id  Int
  order      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  module     Module   @relation(fields: [module_id], references: [id])
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  status     String   @default("ACTIVE")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, course_id])
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  content    String
  rating     Int
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

model StripeCustomer {
  id                 Int      @id @default(autoincrement())
  user_id            Int      @unique
  stripe_customer_id String   @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id])
}

model Subscription {
  id                     Int                  @id @default(autoincrement())
  user_id                Int
  plan_id                Int
  stripe_subscription_id String?              @unique
  stripe_session_id      String?              // <-- Add this
  status                 SubscriptionStatus   @default(ACTIVE)
  frequency              SubscriptionFrequency
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean              @default(false)
  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt
  user                   User                 @relation(fields: [user_id], references: [id])
  plan                   SubscriptionPlan     @relation(fields: [plan_id], references: [id])
}

model Booking {
  id            Int      @id @default(autoincrement())
  user_id       Int
  instructor_id Int
  session_start DateTime
  session_end   DateTime
  status        String   @default("PENDING")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  instructor    User     @relation("InstructorBookings", fields: [instructor_id], references: [id])
  user          User     @relation(fields: [user_id], references: [id])
}

model UserCertification {
  id              Int      @id @default(autoincrement())
  user_id         Int
  course_id       Int
  issued_at       DateTime @default(now())
  certificate_url String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  course          Course   @relation(fields: [course_id], references: [id])
  user            User     @relation(fields: [user_id], references: [id])
}

model ResourceCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  resources   Resource[]
}

model Resource {
  id              Int                @id @default(autoincrement())
  title           String
  description     String
  type            String             // 'curriculum', 'course', etc.
  url             String
  price           Float
  thumbnailUrl    String?
  danceStyle      String?
  ageRange        String?
  difficultyLevel String?
  sellerId        Int
  seller          User               @relation("SellerResources", fields: [sellerId], references: [id])
  purchases       ResourcePurchase[]
  category        ResourceCategory?  @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
}

model ResourcePurchase {
  id                       Int      @id @default(autoincrement())
  user_id                  Int
  resource_id              Int
  stripe_payment_intent_id String?
  status                   String   @default("PENDING")
  amount                   Float
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  resource                 Resource @relation(fields: [resource_id], references: [id])
  user                     User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, resource_id])
}

model Payment {
  id                       Int           @id @default(autoincrement())
  user_id                  Int
  stripe_payment_intent_id String?       @unique
  stripe_session_id        String?       // <-- Add this
  amount                   Float
  reference_id             Int?          // Can be course/resource/subscription
  reference_type           PaymentType   // Already exists: COURSE, RESOURCE, SUBSCRIPTION
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  currency                 String        @default("usd")
  metadata                 Json?
  status                   PaymentStatus @default(PENDING)
  user                     User          @relation(fields: [user_id], references: [id])
}

model UserRoleMapping {
  id        Int      @id @default(autoincrement())
  user_id   Int
  role      UserRole
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, role])
  @@map("user_role_mappings")
}

model UserFeature {
  id          Int      @id @default(autoincrement())
  user_id     Int
  feature_key String
  user        User     @relation("UserFeatures", fields: [user_id], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([user_id, feature_key])
  @@map("user_features")
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  message    String
  type       String
  read       Boolean  @default(false)
  data       Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Message {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  receiver    User     @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  sender      User     @relation("SentMessages", fields: [sender_id], references: [id])

  @@index([sender_id])
  @@index([receiver_id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  parent_id   Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children    Category[] @relation("CategoryHierarchy")
  courses     Course[]   @relation("CourseCategories")
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  courses     Course[] @relation("CourseTags")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, course_id])
}

enum UserRole {
  GUEST_USER
  CURRICULUM_SELLER
  STUDENT
  ADMIN
  DIRECTORY_MEMBER
  CERTIFICATION_MANAGER
  INSTRUCTOR_ADMIN
  CURRICULUM_ADMIN
  COURSE_CREATOR_ADMIN
  BOOKING_PROFESSIONAL
  BOOKING_USER
}

enum SubscriptionTier {
  FREE
  SILVER
  GOLD
  PLATINUM
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELED
}

enum PaymentType {
  COURSE
  RESOURCE
  SUBSCRIPTION
}

enum SubscriptionFrequency {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELED
  FAILED
}

model SubscriptionPlan {
  id                   Int              @id @default(autoincrement())
  name                 String           @unique
  slug                 String           @unique
  description          String?
  features             String[]
  priceMonthly         Decimal          @db.Decimal(10, 2)
  priceYearly          Decimal          @db.Decimal(10, 2)
  stripePriceIdMonthly String?
  stripePriceIdYearly  String?
  isPopular            Boolean          @default(false)
  isActive             Boolean          @default(true)
  isStandalone         Boolean          @default(false)
  planType             String           @default("main")
  featureDetails       Json?
  unlockedRoles        UserRole[]
  tier                 SubscriptionTier
  subscriptions        Subscription[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  @@map("subscription_plans")
}
