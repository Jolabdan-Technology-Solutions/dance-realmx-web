generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  role          user_role @default(STUDENT)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  profile       profile?
  bookings_as_professional booking[] @relation("ProfessionalBookings")
  bookings_as_student     booking[] @relation("StudentBookings")
  resources     resource[] @relation("SellerResources")
  certifications user_certification[]
  enrollments   enrollment[]
  testimonials  testimonial[]
  stripe_customer stripe_customer?
  subscriptions subscription[]
  role_mappings user_role_mapping[]
  features      user_feature[]
  notifications notification[]
  sent_messages message[] @relation("SentMessages")
  received_messages message[] @relation("ReceivedMessages")
  reviews       review[]
  courses_as_instructor course[] @relation("InstructorCourses")
}

model profile {
  id        String   @id @default(cuid())
  user_id   String   @unique
  user      user     @relation(fields: [user_id], references: [id])
  bio       String?
  location  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum user_role {
  STUDENT
  PROFESSIONAL
  SELLER
  ADMIN
}

model booking {
  id               String         @id @default(cuid())
  professional_id  String
  student_id       String
  start_time       DateTime
  end_time         DateTime
  duration         Int
  type             String
  status           booking_status @default(PENDING)
  price            Float
  location         Json
  notes            String?
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  professional     user         @relation("ProfessionalBookings", fields: [professional_id], references: [id])
  student          user         @relation("StudentBookings", fields: [student_id], references: [id])
}

enum booking_status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model booking_availability {
  id               String   @id @default(cuid())
  professional_id  String
  day_of_week      Int
  start_time       String
  end_time         String
  is_recurring     Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  professional     user     @relation(fields: [professional_id], references: [id])
}

model booking_settings {
  id                    String   @id @default(cuid())
  professional_id        String   @unique
  min_notice_hours       Int      @default(24)
  max_advance_days       Int      @default(30)
  cancellation_policy    Json
  buffer_time            Int      @default(15)
  default_duration       Int      @default(60)
  default_price          Float    @default(50)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  professional           user     @relation(fields: [professional_id], references: [id])
}

model course {
  id              String   @id @default(cuid())
  title           String
  description     String?
  instructor_id   String
  price           Float
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  instructor      user     @relation("InstructorCourses", fields: [instructor_id], references: [id])
  enrollments     enrollment[]
  certifications  user_certification[]
  reviews         review[]
}

model enrollment {
  id         String   @id @default(cuid())
  user_id    String
  course_id  String
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation(fields: [user_id], references: [id])
  course     course   @relation(fields: [course_id], references: [id])
}

model testimonial {
  id         String   @id @default(cuid())
  user_id    String
  content    String
  rating     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation(fields: [user_id], references: [id])
}

model stripe_customer {
  id                String   @id @default(cuid())
  user_id           String   @unique
  stripe_customer_id String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user              user     @relation(fields: [user_id], references: [id])
}

model subscription_plan {
  id          String   @id @default(cuid())
  name        String
  price       Float
  features    Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  subscriptions subscription[]
}

model subscription {
  id                String             @id @default(cuid())
  user_id           String
  plan_id           String
  status            subscription_status @default(ACTIVE)
  stripe_subscription_id String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  user              user               @relation(fields: [user_id], references: [id])
  plan              subscription_plan  @relation(fields: [plan_id], references: [id])
}

enum subscription_status {
  ACTIVE
  CANCELLED
  EXPIRED
}

model user_certification {
  id         String   @id @default(cuid())
  user_id    String
  course_id  String
  issued_at  DateTime
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation(fields: [user_id], references: [id])
  course     course   @relation(fields: [course_id], references: [id])
}

model resource {
  id               String   @id @default(cuid())
  name             String
  description      String?
  price            Float
  type             String
  dance_style      String?
  difficulty_level String?
  age_range        String?
  thumbnail_url    String?
  url              String
  seller_id        String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  seller           user     @relation("SellerResources", fields: [seller_id], references: [id])
  purchases        resource_purchase[]
}

model resource_purchase {
  id           String   @id @default(cuid())
  user_id      String
  resource_id  String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user         user     @relation(fields: [user_id], references: [id])
  resource     resource @relation(fields: [resource_id], references: [id])
}

model payment {
  id                  String   @id @default(cuid())
  user_id             String
  amount              Float
  currency            String
  status              String
  stripe_session_id   String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user                user     @relation(fields: [user_id], references: [id])
}

model user_role_mapping {
  id         String   @id @default(cuid())
  user_id    String
  role       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_feature {
  id         String   @id @default(cuid())
  user_id    String
  feature    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation("UserFeatures", fields: [user_id], references: [id], onDelete: Cascade)
}

model notification {
  id         String   @id @default(cuid())
  user_id    String
  type       String
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation(fields: [user_id], references: [id])
}

model message {
  id           String   @id @default(cuid())
  sender_id    String
  receiver_id  String
  content      String
  read         Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  sender       user     @relation("SentMessages", fields: [sender_id], references: [id])
  receiver     user     @relation("ReceivedMessages", fields: [receiver_id], references: [id])
}

model review {
  id         String   @id @default(cuid())
  user_id    String
  course_id  String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       user     @relation(fields: [user_id], references: [id])
  course     course   @relation(fields: [course_id], references: [id])
}
